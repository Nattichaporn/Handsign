import * as tf from "@tensorflow/tfjs-node";
import fs from "fs";
// ‚úÖ ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà Log ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
import pkg from 'papaparse';
const { parse } = pkg;
// -----------------------------------------
import { fileURLToPath } from "url";
import path from "path";

let cachedModel = null;
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export async function predictFromCSV(csvPath) {
  try {
    const csvFile = fs.readFileSync(csvPath, "utf8");
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ parse() ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤ import ‡∏°‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const parsed = parse(csvFile, { header: true, dynamicTyping: true });
    
    const data = parsed.data.filter((r) => Object.keys(r).length > 1 && Object.values(r).some(v => v !== null && v !== ''));
    if (data.length === 0) {
      console.log("‚ö†Ô∏è CSV contains no valid data rows after filtering.");
      return [];
    }
    
    const X = data.map((row) => Object.values(row));
    const tensor = tf.tensor2d(X);

    if (!cachedModel) {
        console.log("üß† Loading model from file...");
        const modelPath = path.resolve(__dirname, 'model/model.json');
        cachedModel = await tf.loadLayersModel(`file://${modelPath}`);
        console.log("‚úÖ Model loaded successfully!");
    }

    const preds = cachedModel.predict(tensor);
    const result = preds.arraySync();
    
    // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏¥‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
    fs.unlinkSync(csvPath);
    
    return result;

  } catch (error) {
    console.error("‚ùå Error inside predictFromCSV:", error);
    // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
    if (fs.existsSync(csvPath)) {
      fs.unlinkSync(csvPath);
    }
    throw error; // ‡∏™‡πà‡∏á error ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏´‡πâ server.js ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
  }
}