// ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå predict.js

import * as tf from "@tensorflow/tfjs-node"; // ‚¨ÖÔ∏è **‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ -node ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢
import fs from "fs";
import Papa from "papaparse";
import { fileURLToPath } from "url"; // ‚¨ÖÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏° 2 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
import path from "path";

let cachedModel = null;
const __filename = fileURLToPath(import.meta.url); // ‚¨ÖÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
const __dirname = path.dirname(__filename); // ‚¨ÖÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ

export async function predictFromCSV(csvPath) {
  // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏≠‡πà‡∏≤‡∏ô CSV ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç) ...
  const csvFile = fs.readFileSync(csvPath, "utf8");
  const parsed = Papa.parse(csvFile, { header: true, dynamicTyping: true });
  const data = parsed.data.filter((r) => Object.keys(r).length > 1);
  const X = data.map((row) => Object.values(row));
  const tensor = tf.tensor2d(X);
  console.log("üì¶ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï:", tensor.shape);

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏ó‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤)
  if (!cachedModel) {
      console.log("üß† ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå...");
      const modelPath = path.resolve(__dirname, 'model/model.json');
      cachedModel = await tf.loadLayersModel(`file://${modelPath}`);
      console.log("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
  }

  // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
  const preds = cachedModel.predict(tensor);
  const result = preds.arraySync();
  console.log("‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:", result[result.length - 1]);
  return result;
}