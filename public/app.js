// --- ‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö ---
const videoElement = document.getElementById("video");
const canvasElement = document.getElementById("output");
const canvasCtx = canvasElement.getContext("2d");
const statusEl = document.getElementById("status");
const predictedLetterEl = document.getElementById("predicted-letter");
const currentWordEl = document.getElementById("current-word");

// --- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ---
let currentWord = "";
let lastPrediction = "?";
let lastCaptureTime = 0;
const CAPTURE_COOLDOWN = 1000; // 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

// **‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç URL ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô URL ‡∏Ç‡∏≠‡∏á Backend ‡∏ö‡∏ô Render.com ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
const API_ENDPOINT = "https://handsign-33az.onrender.com/upload"; 

// **‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:** ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≤‡∏¢‡πÑ‡∏î‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
const ALPHABET_MAP = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];


// --- MediaPipe Hands Setup (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö 2 ‡∏°‡∏∑‡∏≠) ---
const hands = new Hands({
  locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/hands@0.4.1646424915/${file}`,
});

hands.setOptions({
  maxNumHands: 2, // ‚¨ÖÔ∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏°‡∏∑‡∏≠
  modelComplexity: 1,
  minDetectionConfidence: 0.7,
  minTrackingConfidence: 0.7,
});

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å: ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏∏‡∏Å‡πÄ‡∏ü‡∏£‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á ---
hands.onResults((results) => {
  canvasCtx.save();
  canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);
  canvasCtx.drawImage(results.image, 0, 0, canvasElement.width, canvasElement.height);

  // ‡∏ñ‡πâ‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏°‡∏∑‡∏≠
  if (results.multiHandLandmarks && results.multiHandLandmarks.length > 0) {
    let signHand = null;
    let controlHand = null;

    // ‡πÅ‡∏¢‡∏Å‡∏°‡∏∑‡∏≠‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤
    for (let i = 0; i < results.multiHandLandmarks.length; i++) {
      const classification = results.multiHandedness[i];
      const landmarks = results.multiHandLandmarks[i];
      
      // ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ö‡∏ô‡∏°‡∏∑‡∏≠
      drawConnectors(canvasCtx, landmarks, HAND_CONNECTIONS, { color: '#FFFFFF', lineWidth: 5 });
      drawLandmarks(canvasCtx, landmarks, { color: '#00FF00', lineWidth: 2 });
      
      // ‡∏™‡∏°‡∏°‡∏ï‡∏¥: ‡∏°‡∏∑‡∏≠‡∏ã‡πâ‡∏≤‡∏¢‡∏ó‡∏≥‡∏ó‡πà‡∏≤, ‡∏°‡∏∑‡∏≠‡∏Ç‡∏ß‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
      if (classification.label === 'Left') {
        signHand = landmarks;
      } else if (classification.label === 'Right') {
        controlHand = landmarks;
      }
    }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏°‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏ó‡πà‡∏≤ (‡∏°‡∏∑‡∏≠‡∏ã‡πâ‡∏≤‡∏¢)
    if (signHand) {
      predictInRealtime(signHand);
    }
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏°‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° (‡∏°‡∏∑‡∏≠‡∏Ç‡∏ß‡∏≤) ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡πà‡∏≤‡∏Å‡∏≥‡∏°‡∏∑‡∏≠
    if (controlHand && isFist(controlHand)) {
      captureLetter();
    }

  } else {
    statusEl.textContent = "No hand detected";
  }

  canvasCtx.restore();
});


// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏≤‡∏¢‡∏ú‡∏•‡πÅ‡∏ö‡∏ö Real-time ---
let isPredicting = false;
async function predictInRealtime(landmarks) {
  if (isPredicting) return; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
  isPredicting = true;
  statusEl.textContent = "üß† Analyzing...";

  // ‡πÅ‡∏õ‡∏•‡∏á Landmarks ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ñ‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Ç‡∏≠‡∏á CSV
  const flatLandmarks = landmarks.flatMap(lm => [lm.x, lm.y, lm.z]);
  const headers = Array.from({ length: 63 }, (_, i) => `p${i + 1}`).join(",");
  const csvRow = flatLandmarks.join(",");
  const csvContent = `${headers}\n${csvRow}`;
  
  const blob = new Blob([csvContent], { type: 'text/csv' });
  const formData = new FormData();
  formData.append("csvfile", blob, "realtime.csv");

  try {
    const response = await fetch(API_ENDPOINT, { method: "POST", body: formData });
    const result = await response.json();
    
    // ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    const predictionScores = result[0];
    const maxScoreIndex = predictionScores.indexOf(Math.max(...predictionScores));
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
    lastPrediction = ALPHABET_MAP[maxScoreIndex] || "?";
    predictedLetterEl.textContent = lastPrediction;
    statusEl.textContent = "üü¢ Ready";

  } catch (error) {
    console.error("Prediction Error:", error);
    statusEl.textContent = "‚ùå Prediction Failed";
  } finally {
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏î‡∏µ‡πÄ‡∏•‡∏¢‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏¢‡∏ú‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    setTimeout(() => { isPredicting = false; }, 200);
  }
}

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡πà‡∏≤ "‡∏Å‡∏≥‡∏°‡∏∑‡∏≠" (‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢) ---
function isFist(landmarks) {
    // ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£: ‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏Å‡∏±‡∏ö‡∏ù‡πà‡∏≤‡∏°‡∏∑‡∏≠
    const palmBase = landmarks[0]; 
    const fingerTips = [landmarks[8], landmarks[12], landmarks[16], landmarks[20]]; // ‡∏õ‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏ä‡∏µ‡πâ, ‡∏Å‡∏•‡∏≤‡∏á, ‡∏ô‡∏≤‡∏á, ‡∏Å‡πâ‡∏≠‡∏¢
    
    let totalDistance = 0;
    for (const tip of fingerTips) {
        const distance = Math.sqrt(
            Math.pow(tip.x - palmBase.x, 2) +
            Math.pow(tip.y - palmBase.y, 2) +
            Math.pow(tip.z - palmBase.z, 2)
        );
        totalDistance += distance;
    }
    
    // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á (‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ 0.15 ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°)
    return (totalDistance / fingerTips.length) < 0.15;
}


// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏•‡∏∞Reset ---
function captureLetter() {
  const now = Date.now();
  if (now - lastCaptureTime > CAPTURE_COOLDOWN) {
      if (lastPrediction !== "?") {
        currentWord += lastPrediction;
        currentWordEl.textContent = currentWord;
      }
      // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏°‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£ Reset ‡∏î‡πâ‡∏ß‡∏¢ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ:
      // currentWord = ""; // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      
      lastCaptureTime = now; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏£‡∏±‡∏ß‡πÜ
      statusEl.textContent = `‚úÖ Captured: ${lastPrediction}`;
  }
}

// --- Camera Setup (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
const camera = new Camera(videoElement, {
  onFrame: async () => {
    await hands.send({ image: videoElement });
  },
  width: 640,
  height: 480,
});
camera.start();